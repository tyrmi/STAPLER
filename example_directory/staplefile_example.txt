STAPLER
#(For clarity, check also the stapler_example_no_discription.txt to see this file without description texts/comments!)
#The first line must contain the string STAPLER
#You may add comments to staplefiles by using '#' character, but notice that this is not the case inside the SLURM setup section of configuration file!

#The mandatory JOB_NAME -parameter will be used in the names of the directories STAPLER creates for this job.
JOB_NAME: ExampleJob01
#The mandatory STARTING_POINT -parameter shuold point to a directory that contains your input files.
STARTING_POINT: <absolute_path_to_current_direcory>/my_raw_data/
#The optional PROJECT_FILE parameter can be used to define a path to a project file. Project file can be used to control how the job is parallelized with SLURM. For more details see the manual pdf and the PROJECT.txt.
PROJECT_FILE: <absolute_path_to_current_direcory>/PROJECT.txt


#The following SLURM section defines the contents of the SLURM configuration file. This section is mandatory only when running jobs through SLURM resource manager. Notice that the section below does not contain the following mandatory arguments for running SLURM which will be automatically generated by STAPLER:
#(1) --job-name, which is automatically generated from the JOB_NAME argument above.
#(2) --array argument defining which array jobs will be run.
#(3) The actual commands defining the jobs for each array job.
#For more information on general usage and deciding suitable parameters for SLURM refer to the documentation of your computation service provider and the official SLURM documentation.

SLURM:
#!/bin/bash -l
#SBATCH --time=00:15:00
#SBATCH --partition=test
#SBATCH --nodes=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=8000
SLURM END:

#You can now add the tools you wish to use between the the 'COMMANDS:' and  'COMMANDS END:' -lines.
#Use the STAPLER built-in help function to check how to use certain software with STAPLER.
#General tips:
#(1) Use the help function via terminal app by typing 'python STAPLER.py -h' to see the supported software and 'python STAPLER.py -h <tool_name>' to see tool-specific usage instruction for each tool
#(2) In general you should not specify input/output files for tools as STAPLER does this automatically for you!
#(3) Pay attention to the 'Mandatory arguments' -part of tool-specific help, the listed arguments are what you should have in your staplefile!
#Notice that the tool specific help is not meant to be exhaustive description on the usage of the tool, it just describes how to use the tool in the context of STAPLER! You may find more info on the original manual/documentation of the tool. Also notice, that although with some tools it is possible to define the same argument several times in single command line, by default an argument can be defined only once per each command line. Details on how to circumvent this is provided case-by-case basis in the built in help for each specific tool this limitation concerns.

#If the need arises, you have two different 'special values' that you can use to override the STAPLER's automatically set values for each of your input files separately:
#(1) The first kind of special value looks like this: !2table:path/to/a/file. !2tables are paths to files, which contain two tab delimited columns. The first column in the table contains the name of a file and the second column a specific value for the specified file. See fastq_quality_filter command below for example.
#(2) The second (and more flexible) kind of special value looks like this: !named_table:path/to/a/file:column_name_1:column_name_2. The file should contain at least two tab delimited columns with the first line being the name of each column. column_name_1 specifies the name of the column that contains the ids of files (id of a file is the file name without extension, e.g. id of sample_01.bam is sample_01). column_name_2 contains the specific value to be used with the file in question.

COMMANDS:
#Initial quality check
fastx_quality_stats -Q 33
fastq_quality_boxplot_graph

#Trim reads
fastx_trimmer -f !2table:<absolute_path>/example_dir/sample_names_lengths.txt -Q 33
fastq_quality_trimmer -t 20 -l 70 -Q 33
fastq_quality_filter -q 20 -p 50 -Q 33
COMMANDS END:
